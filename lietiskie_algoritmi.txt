[2.09]
	4.tēmas:
	1)datu saspiešana:
		teksta saspiešana: Huffman, Lenpel-zevi, burrows-wheeler algoritmi
		attēlu un skaņas saspiešana: kvantizācijas, transformācijas
	2)kļūdu korekcija:
		nokodēt datus tā, lai tos varētu atjaunot kļūdu gadījumā
		Heminga kods, Rīda-Solomona kods
		tornado kods
	3)optimizācija:
		kā kaut ko izdarīt minimālā laikā
		lineārā programmēšana
		simpleksa/elipsoīda/iekšējā punkta algoritmi
	4)meklēšana:
		meklēšana simbolu virknēs: Karp-Rabin, Boyer-Moore, Knuth-Morris-Pratt
		aptuvenā meklēšana
		meklēšana dokumentu kolekcijās/Internetā

	Prasības KP iegūšanai:
		60% - veido MD: 
			3-5 md (uz papīra vai estudijās(viens fails + pdf formātā, jānorāda vārds/st. apliecības nr. gan tekstā, gan nosaukumā))
			termiņš ~2 nedēļa no publicēšanas estudijās (1 nedēļa kavējums 10% samazinājums, ilgāk nebūtu ieteicams)
		40% - veido KD:
			rakstiski ar materiāliem 2h
		i-iespēja:
			papildus uzdevumi

	Konsultācija:
		Pirmdienās 14-30 līdz 16-20, 319. kabinets

*************************************************************************************************
Datu saspiešana:
	Bez zudumiem: Dati` = Dati
		teksts/programmas
	Ar zudumiem: Dati` ~ Dati
		attēls/skaņa

Saspiešana bez zudumiem:
	1) Universāla saspiešana nav iespējama
	Dati nav nejauši(pastāv likumsakarības)
	Teksta saspiešana:
		angļu valodas teksts: 96 simboli
		bez saspiešanas: 96 simboliem -> 7 biti
		labākais algoritms: 1.9 biti/simbola
		teorētiskā robeža: ~1.3 biti/simb
		Huffman alg.: 4.7 biti/simb
	Likumsakarība(Hofmaņa alg.):
		daži burti ir daudz biežāki par citiem
	Prefiksu koki:
		binārs koks, škautnes apzīmētas ar 0/1, lapas - burti
		biežāk lietotie burit tuvāk koka saknei
	Huffmana alg:
		atrod labāko iespējamo prefiksu koku

***************************************************************************************************
[9.09]
***************************************************************************************************
Hofmaņa algoritms:
	https://www.youtube.com/watch?v=umTbivyJoiI
	burtu biežumi => labākais koks
	Algoritms:
		-Izveido pa lapai katram burtam
		-Atkārto: (līdz viss savienots vienā kokā)
			-sameklē divus burtus ar vismazāko biežumu un apvieno (apvienotais zars(biežums ir x + y))
Hofmaņa algoritma optimalitāte:
	Kritērijs:
		vidējais bitu skaits 1 bita nokodēšanai
		p_i - biezumi
		l_i - bitu skaitu, lai nokodētu i
		V=SUM(limits(i)p_i*l_i) <= jābūt minimālam
	Īpašības optimālajam kokam:
		-Ja p_x < p_y, tad l_x >= l_y (ja neizpildās, apmaina vietām x un y)
		-Ir vismaz 2 x ar max l_x
		-Ja x, y retākie 2 burti, tad viens no optimālajiem kokiem satur to apvienojumu (visretākais)
		-Pamato ar indukcijas palīdzību
Entropija:
	Modelis:
		katrs burts tiek izvēlēts neatkarīgi no citiem burtiem, x ar biežumu p_x
	Entropija:
		H = -SUM(limits(x) p_x*log(p_x))
	Teorēma:
		Nejaušu tekstu ar biežumiem p_x nevar saspiest līdz < H bitiem uz burtu
	Angļu valoda:
		Huffman:
			4.9 biti/burtu
			H: 4.7 biti/burtu
		Teorēma:
			H <= V < H+1
		Teorēma:
			V <= H + max(p_x+0.086)
Aritmētiskā kodēšana:
	Sadala proporcionāli burtu biežumam
	Atkārto katram burtam tekstā
	Rezultāts:
		-skaitlis no pēdējā inetrvāla
	Apgalvojums:
		Aritmētiskā kodēšana sasniedz H bitus uz burtu (t.i. sasniedz entropiju)
**********************************************************************************************************************
[16.09]
**********************************************************************************************************************
Lempela-Ziva algoritms
	Takstā ir fragmenti, kas atkārtojas. Ievieš apzīmējumus šiem fragmentiem.
	LZ78:
		w = NIL;
		while(k=readchar()){
			if wk in dictionary {w=wk}
			else{
				output code for w;
				add wk to dictionary;
				w=k;
			}
		output code for w;

		Vārdnīca:
			-sākumā visi burti
			-saspiežot tekstu papildina vardnīcu ar garākām burtu virknēm, kas sastopamas tekstā.
		Piemērs:
			ababcabcdabc

		Datu struktūra vārdnīcai:
			meklēšanas koks
			hash tabula
		Ierobežota vs neierobežota vārdnīca:
			ierobežota vārdnīca ~2000 vārdi
	LZ77:
		Vārdnīca = jau saspiestais teksta gabals. Logs pēdējie k simboli.

	Palīgmetodes:
		-Bitu virkne
			00011001100... => 0(ar ko sākas virkne),3,2,2,2,... (RLE - run length encoding) Melbaltu attēlu kodēšan. Beigās pielieto kādu no kodēšanas algoritmiem.
		-Starpību kodēšana:
			dati ir skaitļi 17, 12, 23, 14, ... => 17, 12-17, 23 - 12, ... Beigās pielieto kādu no kodēšanas metodēm.
***************************************************************************************************************************
[23.09]
***************************************************************************************************************************
Burrows-Wheeler
	[BW transformācija]->[Move to front]->[Hoffman arithmetic]
	Move to front:
		iejā simbolu virkne un izejā skaitļu virkne
		Simbolus saliek masīvā un ja nāk kāds simbolds, tad kodē ar vietu masīvā(vienlaikus pārvieto uz masīva sākumu)
	BW transformācija:
		1)sadala tekstu pa ~1000 simbolu blokiem
		2)katru bloku ņem visas simbolu virknes, ko iegūst bloku nobīdot pa 1,2,3...simboliem(cikliska nobīde)
		3)sakārto virknes pēc 2. simbola no beigām (ja vienāds pēc 3., 4. ...)
		4)rezultāts virkņu pēdējie simboli

Saspiešana ar zudumiem
	attēls(video), skaņa
	mērķis atjaunot kaut ko, kas izskatās/izklausās līdzīgi

	1)skalārā kvantizācija
		256 krāsas->64 krāsas
		a)vienmērīga kvantizācija
		b)nevienmērīga kvanticācija
	2)vektoru kvantizācija
	3)Transformācijas	
		Pārveido datus formā, kur kvantizācijas dod labus rezultātus
