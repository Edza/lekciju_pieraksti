[2.09]
	4.tēmas:
	1)datu saspiešana:
		teksta saspiešana: Huffman, Lenpel-zevi, burrows-wheeler algoritmi
		attēlu un skaņas saspiešana: kvantizācijas, transformācijas
	2)kļūdu korekcija:
		nokodēt datus tā, lai tos varētu atjaunot kļūdu gadījumā
		Heminga kods, Rīda-Solomona kods
		tornado kods
	3)optimizācija:
		kā kaut ko izdarīt minimālā laikā
		lineārā programmēšana
		simpleksa/elipsoīda/iekšējā punkta algoritmi
	4)meklēšana:
		meklēšana simbolu virknēs: Karp-Rabin, Boyer-Moore, Knuth-Morris-Pratt
		aptuvenā meklēšana
		meklēšana dokumentu kolekcijās/Internetā

	Prasības KP iegūšanai:
		60% - veido MD: 
			3-5 md (uz papīra vai estudijās(viens fails + pdf formātā, jānorāda vārds/st. apliecības nr. gan tekstā, gan nosaukumā))
			termiņš ~2 nedēļa no publicēšanas estudijās (1 nedēļa kavējums 10% samazinājums, ilgāk nebūtu ieteicams)
		40% - veido KD:
			rakstiski ar materiāliem 2h
		i-iespēja:
			papildus uzdevumi

	Konsultācija:
		Pirmdienās 14-30 līdz 16-20, 319. kabinets

*************************************************************************************************
Datu saspiešana:
	Bez zudumiem: Dati` = Dati
		teksts/programmas
	Ar zudumiem: Dati` ~ Dati
		attēls/skaņa

Saspiešana bez zudumiem:
	1) Universāla saspiešana nav iespējama
	Dati nav nejauši(pastāv likumsakarības)
	Teksta saspiešana:
		angļu valodas teksts: 96 simboli
		bez saspiešanas: 96 simboliem -> 7 biti
		labākais algoritms: 1.9 biti/simbola
		teorētiskā robeža: ~1.3 biti/simb
		Huffman alg.: 4.7 biti/simb
	Likumsakarība(Hofmaņa alg.):
		daži burti ir daudz biežāki par citiem
	Prefiksu koki:
		binārs koks, škautnes apzīmētas ar 0/1, lapas - burti
		biežāk lietotie burit tuvāk koka saknei
	Huffmana alg:
		atrod labāko iespējamo prefiksu koku

***************************************************************************************************
[9.09]
***************************************************************************************************
Hofmaņa algoritms:
	https://www.youtube.com/watch?v=umTbivyJoiI
	burtu biežumi => labākais koks
	Algoritms:
		-Izveido pa lapai katram burtam
		-Atkārto: (līdz viss savienots vienā kokā)
			-sameklē divus burtus ar vismazāko biežumu un apvieno (apvienotais zars(biežums ir x + y))
Hofmaņa algoritma optimalitāte:
	Kritērijs:
		vidējais bitu skaits 1 bita nokodēšanai
		p_i - biezumi
		l_i - bitu skaitu, lai nokodētu i
		V=SUM(limits(i)p_i*l_i) <= jābūt minimālam
	Īpašības optimālajam kokam:
		-Ja p_x < p_y, tad l_x >= l_y (ja neizpildās, apmaina vietām x un y)
		-Ir vismaz 2 x ar max l_x
		-Ja x, y retākie 2 burti, tad viens no optimālajiem kokiem satur to apvienojumu (visretākais)
		-Pamato ar indukcijas palīdzību
Entropija:
	Modelis:
		katrs burts tiek izvēlēts neatkarīgi no citiem burtiem, x ar biežumu p_x
	Entropija:
		H = -SUM(limits(x) p_x*log(p_x))
	Teorēma:
		Nejaušu tekstu ar biežumiem p_x nevar saspiest līdz < H bitiem uz burtu
	Angļu valoda:
		Huffman:
			4.9 biti/burtu
			H: 4.7 biti/burtu
		Teorēma:
			H <= V < H+1
		Teorēma:
			V <= H + max(p_x+0.086)
Aritmētiskā kodēšana:
	Sadala proporcionāli burtu biežumam
	Atkārto katram burtam tekstā
	Rezultāts:
		-skaitlis no pēdējā inetrvāla
	Apgalvojums:
		Aritmētiskā kodēšana sasniedz H bitus uz burtu (t.i. sasniedz entropiju)
**********************************************************************************************************************
[16.09]
**********************************************************************************************************************
Lempela-Ziva algoritms
	Takstā ir fragmenti, kas atkārtojas. Ievieš apzīmējumus šiem fragmentiem.
	LZ78:
		w = NIL;
		while(k=readchar()){
			if wk in dictionary {w=wk}
			else{
				output code for w;
				add wk to dictionary;
				w=k;
			}
		output code for w;

		Vārdnīca:
			-sākumā visi burti
			-saspiežot tekstu papildina vardnīcu ar garākām burtu virknēm, kas sastopamas tekstā.
		Piemērs:
			ababcabcdabc

		Datu struktūra vārdnīcai:
			meklēšanas koks
			hash tabula
		Ierobežota vs neierobežota vārdnīca:
			ierobežota vārdnīca ~2000 vārdi
	LZ77:
		Vārdnīca = jau saspiestais teksta gabals. Logs pēdējie k simboli.

	Palīgmetodes:
		-Bitu virkne
			00011001100... => 0(ar ko sākas virkne),3,2,2,2,... (RLE - run length encoding) Melbaltu attēlu kodēšan. Beigās pielieto kādu no kodēšanas algoritmiem.
		-Starpību kodēšana:
			dati ir skaitļi 17, 12, 23, 14, ... => 17, 12-17, 23 - 12, ... Beigās pielieto kādu no kodēšanas metodēm.
***************************************************************************************************************************
[23.09]
***************************************************************************************************************************
Burrows-Wheeler
	[BW transformācija]->[Move to front]->[Hoffman arithmetic]
	Move to front:
		iejā simbolu virkne un izejā skaitļu virkne
		Simbolus saliek masīvā un ja nāk kāds simbolds, tad kodē ar vietu masīvā(vienlaikus pārvieto uz masīva sākumu)
	BW transformācija:
		1)sadala tekstu pa ~1000 simbolu blokiem
		2)katru bloku ņem visas simbolu virknes, ko iegūst bloku nobīdot pa 1,2,3...simboliem(cikliska nobīde)
		3)sakārto virknes pēc 2. simbola no beigām (ja vienāds pēc 3., 4. ...)
		4)rezultāts virkņu pēdējie simboli

Saspiešana ar zudumiem
	attēls(video), skaņa
	mērķis atjaunot kaut ko, kas izskatās/izklausās līdzīgi

	1)skalārā kvantizācija
		256 krāsas->64 krāsas
		a)vienmērīga kvantizācija
		b)nevienmērīga kvanticācija
	2)vektoru kvantizācija
	3)Transformācijas	
		Pārveido datus formā, kur kvantizācijas dod labus rezultātus
******************************************************************************************************************************
[30.09]
******************************************************************************************************************************
Kļūdu korekcija
	Kļūdu detekcija:
		Dati->Kodēti dati->Trokšņi->??->Sākotnējie dati
		D->C->C`->D
	Kļūdu korekcija:
		Dati->Kodēti dati->Dati ar kļūdām->Sākotnējie dati
		D->C->C`->D
	Vispārīgā nostādne:
		D->C
		k biti -> n biti
		Ja ziņojumā C sabojāās d biti, tad var atjaunot D. Ja izpildās, tad izpildās [n,k,d] kods.
	Teorēma:
		(Kods var labot 1 kļūdu) <=> (Jebkuri 2 ziņojumi atšķiras vismaz 3 vietās)
		(Kods var labot d kļūdas) <=> (Jebkuri 2 ziņojumi atšķiras vismaz 2d+1 vietās)
	Kodi, kas spēj labot 1 kļūdu:
		3 bitu ziņojumi:
			0 -> 000
			1 -> 111
		Heminga kods [7,4,1]:
			1,2,3,5 bits kodētajā ir no kodētā teksta 
				y1=(x1+x2+x3)mod2, 
				y2=(x1+x2+x4)mod2, 
				y3=(x1+x3+x4)mod2
*******************************************************************************************************************************
[7.10]
*******************************************************************************************************************************
Heminga vispārējais gadījums:
	2^n-n-1 biti => 2^n -1 biti (kods var labot vienu kļūdu)
	-Informācijas biti
		(sākotnējie biti, kas tiek pārkopēti uz ziņojumu)
		Pārējie, kas nav kontroles biti
	-Kontroles biti
		(tiek izrēķināti no informācijas bitiem)
	----
	1) pārkopē informāciju uz informācijas bitiem
	2) x00...1 0...1 = SUM(Xj...ji-1 ji+1...Jn)mod2
		Tie biti, kuru nummuros ir tieši 1 vieninieks
	
	kļūdas korekcijas:
		1) pārrēķina (x) katram i
		2) ja nesakrīt, kļūda ir SUM funkcijā
	Heminga kods ir optimāls:
		ja S<={0,1}^(2^n -1), S koriģē 1 ķļudu (katras x, y pieder S atšķiras >=3 vietās), tad |S| <= 2^(2^n -n-1)

Lineāri kodi:
	katrs ziņojuma bits: (xi+...Xi) mod 2

Rīda Solomona kodi:
	Balstās uz algebras pamatteorēmu:
		polinomam f(X) = a0 + a1X ... anx^n ir <=k x:f(x)=0
		s-(k-1)>=2c+1, c kļūdas, k - skaitļu koeficients
		Piemērs:
			k=3, S=9 => c <= 3
*******************************************************************************************************************************
[14.10]
*******************************************************************************************************************************
Patiesībā izmanto galīgus laukus.
Dati=>Galīgā lauka skaitļi=> tās pašas darbības kā veseliem skaitļiem.

Dubuntā RS kodēšana.
Vērtības sadala blokos.
Rs(24,32), tad elementus pārkārto (interlace) Pirmie elementi no katra bloka pirmajā blokā, otrā otrie, utt.

Kodēšana un tehnoloģiju attīstība.

Kodi datu pārraidei Internetā (Tornado kodi).

Saņemti dati ir pareizi.
Liela daļa no datiem nav saņemti.
Atkārtota datu sūtīšana var nebūt iespējama.
RS kodus nevar lietot, jo tie ir par lēnu.

Grafu kodi.
Divdaļigs grafs ar
informācijas biti(x_i) kreisā pusē,
kontrolbiti (y_i) labajā pusē(y_i=(\sum x_j|y_i un x_j ir savienoti)mod 2)

Iterātie grafu kodi
Divi kodi:
x_i->y_i un y_i->z_i

Vairāki kodi
-> -> -> -> un -> RS
Atkodēšana

*******************************************************************************************************************************
[21.10]
*******************************************************************************************************************************
Lineārā programmēšana
Optimizācijas uzdevumi
	f(x_1,x_2,..,x_n) - min/max=?
	ar nosacījumiem f(x_1,x_2,..,x_n) -min/max=? 
	P_1(x_1,x_2,..,x_n)>=0
	..
	P_k(x_1,x_2,..,x_n)>=0
Kvadrātiskā programmēšana
	(\sum_{i,j}C_{ij}x_i y_i+\sum_i d_i x_i
	a_{11}x_1..a{1n}x_n>=0
	..
	a_{k_1}x_1 >=0
Lineārā programmēšana
	\sum_i x_i -max/min=?
	a_{11}... >=0
Piemērs I:
	Produkti 1..n, cenas P_1 ..p_n
	Uzturvielas 1..k, katra c_i daudzumi
	i-ta produkta paka a_{ij} vienības j uzturvielas
	min \sum_i p_i*x_i
	\fall x x_i>=0
	\fall j \sum_i a_{ij} >=c_j
Piemērs II:
	n cilvēki un n uzdevumi
	x_{ij}-i-tais cilveks pilda j uzdevumu
	0-nepilda
	1-pilda
	max \sum _{i,j} x_{ij}
	x_{ij}=0, ja i neprot j
	citādi x_{ij}=1 vai 0
	\fall i \sum_j x_{ij}<=1
Vispārīgais uzdevums
	\sum_i x_i -max=?
	a_{11}... <=b_1
Grafiksais risinājums
	Uzzīmē visas taisnes, izdala planes daļu, kura atbilst nosacījumiem.
Simplex metode
	Sāk ar patvaļīgu stūri V
	Kamēr V nav max iet uz blakus stūri U, kuram izteikmes vertība ir lielāka.
Tabulas forma
	max(2x_1+3x_3)
	x-2x_2+x_3=4
	x+x_2+x_4=18
	x_2+x_5=10
	x_1,x_2>=0
	x_3,x_4,x_5>=0
Standartforma

	------------------------
		| E_n |b_i
	------------------------
	c_1..c_n|00000000|
	brīvie, pamatmainīgie
	x_i=0, x_i != 0
Simplexalgoritms
	1.Uzbūvē tabulustandartformā
	2.Izvēlas brīvā mainīgo, kuru palielinot, palienās izteiksme
	3.Palielinam mainīgo, nomaina brīvos mainīgos
	4.Darīt kamēr var izvēlēties lielāku
**************************************************************************************************************
[28.10]
**************************************************************************************************************
max 5*x_1 + 14*x_2
    x_1 + x_2 <= 1
    2*x_1 + 7*x_2 <=9
    x_1 >=0, x_2>=0
----------------------
 1) 3(2x_1+7x_2)<=3*9
5x_1+14x_2<=6x_1+21x_2<=27
 2) 5x_1+14x_2 <= 14x_1+14x_2 <=14
-------vispārīgajā gadījumā----------
max c1 x1 + ... + cn xn
a) x1, ...xn => max >= c
b)nosacījumi => Novērtējumi no augšas => max <= c

Novērtējums no augšas?
    x_1 + x_2 <= 1
    4*x_1 + 14*x_2 <= 18 (2*x_1+7*x_2 <= 9 | *2)
    --------------
    5x_1 + 15x_2 <=19
    5x_1 + 14x_2 <= 5x_1 + 15x_2 <= 19
    Maksimums <= 19

Labākais novērtējums no augšas
    min c1 + 9c2         -
        c1 + 2c2 >= 5     | <= Lineāra programma
        c1 + 7c2 = 14     |
        c1 >= 0, c2 >= 0 -

Duālā programma
    Sākotnējā (primārā) programma => max
                 ||
             Duālā programma => min b1y1 + b2y2 ...

Dualitātes teorēma:
	1) Ja primārajai programmai eksistē max, tad max(c1x1...+cnxn) = min(b1x1+...)
	2) Ja max(c1x1...) = infi (tas ir c1x1... var būt patvaļīgi liels), tad duālajai programmai nav atrisinājuma.
	3) Ja primārās programmas nosacījumi ir pretrunīgi, tad duālājai programmai b1y1+... var padarīt patvaļīgi mazu

-----Ja primārā----
max     c1x1+...cnxn
	a11x1...a1nxn <=b1
	a21x1... = b2
	am1x1+... >=bm
	x1>=0 ...
tad duālā programma:
min	b1y1...+bmym
	a11y1 + a21y2+...+am1ym {>=;=;<=} c1
	a12y1+...+am2ym {>=;=;<=} c2
	y1{>=0; <=0}, y2...

(zīmes) xI >= 0 => a1Iy1+...+amIyI >= cI
        xI <= 0 => ..... <= cI
        ja nav abi augšējie, => =cI
	---------------------------------
	aI1x1+...+aInxn <= bI => u1 >= 0
        ... >= bI => yI <= 0
	... = bI => nav >= vai <=

Teorēma:
    (maksimuma atrašana) = (visu nosacījumu izpildīšanās)

Elipsoīda algoritms(hacijans 1979)
	-Laiks O(n^4 L), kur n - mainīgo skaits un L-precizitāte
0) Nosaka lielu apgabalu, kur noteikti atrodas atrisinājums. Novelk elipsoīdu, kur atrodas viss apgabals.
1) Atkārto:
	-ja elipsoīda centrā izpidlās visi nosac, OK
	-atrod nosacījumu, kas elipsoīda centrā tiek pārkāpts visvairāk
vol(E_k+1)   1
--------- <= -------
 vol(E_k)     2^(1/2n+1)
[4.11]
Lineārā programešana III
Iekšējā punkta metode
 O(\sqrt{nL}) iterācijas, L-precizitāte, n-mainīgo skaits
 Virzās pa pieļaujamā apgabala iekšpusi, palielinot maksimājās izteiksmes vērtību.
 
Afīnā skalēšana
Linerā p;rogramma formā ir tikai = un mainigā >=0
Ax=b,x_i>=0

Algoritms:
1) sāk ar kaut kādu atrisinājumu;
2) Atkārto
  Novek elipsoīdu ap tekošo atrisinājumu x, kas pieskaras visām x_i=0
  Atrodam maksimumu izteiksmei uz elipsoīda. (Ignorējot Ax=b)
  Projicē atrasto x' uz alipsoīda uz plakni Ax=b
  Rezultāts virziens p=(p_1..p_n), kurā izteikmsme pieaug visvairāk
  Tekošais atrisinājums (x_1..x_n)
  Novelkam taisni (x_1+tp_1..x_n+tp_n), atrod pirmo krustpunktu ar x_i=0
  Pavirzāmies 96%(vai citu %) līdz x_i=0

Atraskt max uz elipsoida:
T.: izteiksmes sum(c_iz_i), tad mazimums ir virzienā z_i=c_i.

Projekcijas formula:
p=z-A^T(AA^T)^{-1}Az

=======================================================
Meklēšana
Meklēšana simbolu virknēs
T[N]m,P[m]
Vai vārds ir sastopams tekstā.
Naivais algoritms =n*m
Automāts n+f(m)
=======================================================
[25.11]
Meklēšana

T=T[0]...T[n-1]
P=P[0]...P[m-1]
Atrast visas vietas, kur vārds sastopams tekstā.

Boyer-Moore
Sākam pārbaudīt ar pēdējo, salīdzinam simbolus no beigām.
Varam izslēgt daudzus simbolus.
Soļus skaits ~n/m

"Sliktā simbola tabula" Char=>Int
pēdējā pozīcija, kur sastopams šis simbols.
S[X]={max i:P[i]=x
     {-1,ja tāda i nav

Nobīde:
offset=pos-S[X]

"Labā prefiksa tabula" Int=>Int
L[k]-mazākā nobīde, kas nerada problēmas, ja mēs zinām, ka P[k]...P[m-1] sakrīt, pārējie nesakrīt
--------------------------------------------------------
Karpa-Rabīna algoritms
P[0]...P[m-1] -hash funkcija
   h(P[0..m-1])
Katram i=0,...,n-m:
  -rēķinam h(T[i .. i-m+1])
  -salīdzinam h(T[i .. i-m+1]) un h(P[0..m-1])
  -ja sakrīt saldizina vērtības

Piemērs
h(P[0 .. m-1])=Sum _
h(P[i+1 .. m+i+1-1])=h(P[i .. m+i-1])-P[i]+P[m+i-1+1]

Actual hash funcition:
h(P[0 ..m-1]=(Sum_i P[i]*k^{m-i} ) mod p
pārēķināšana:
h(P[i+1 .. m+i+1-1])=((h(P[i .. m+i-1])-P[i])*k+P[m+i+1-1]) mod p
====================================================================
[02.12]
====================================================================
Meklēšna/simbolu virkņu salīdzināšana

Kāds ir mazākais sakits izmaiņu,
  lai iegūtu T1 no T2
Izmaiņas
  simbolu izmaiņu
  izmešana
  iespraušana


Rekursīvs algoritms
Opt(T[0 .. n-1],T'[0 .. m-1])=
  =min(Opt(T[0..n-1],T'[0..m-2])+1,
       Opt(T[0..n-2],T'[0..m-1])+1,
       Opt(T[0..n-2],T'[0..m-2]), ja T[n-1]=T'[m-1]
       Opt(T[0..n-2],T'[0..m-2])+1, ja T[n-1] != T'[m-1])

Kāda ir ši algoritma ātrdarbība? ~O(nm)

Dinamiskā programēšana
M(i,j)- darbību skaits lai pārveidotu
M(0,j)=j,M(i,0)=i

for all i,j i in (0 to n-1), j in (0 to m-1)
M(i,j) if(T[i-1]=T'[j-1]) = M(i-1,j-1)
	else Min(M(i-1,j-1),M(i-1,j),M(i,j-1))

Darbību skaits <= D
Neapskata "stūrus" UR un DL.

Algoritms 2(Needleman-Wurcg,1970):
1) D=1
2) atkārto:
    darbina algoritmu
    ja min darbību skaits >D
         tad D=2D
----------------------------------------------
Ukkonen,1995
--------------------------------------------------------------------------------
[9.12.14]
--------------------------------------------------------------------------------
Meklēšana (dokumentos):
    dokumenti -> indekss (<- jautājums) -> dokumentu saraksts
    
    Saraksts:
        Dokumentu saraksts, kuri satur meklējamo vārdu.
        (1) Starpību kodēšana:
            17,23,29,31,43 ... => 17,6,6,2,12
        (2) Mazāki skaitļi biežāk
            17,6,6,2,12 -> Huffman/arithmetic OR gamma kods
            *******************
            gamma kods (uz pieņēmumu, ka starpības mazas)
            *******************
            skaitlis n => binārājā pierakstā b1, b2...bk
            kodē => (0...0)garumā K un b1,b2,...bk
            
            Prefiksa koks
            - binary - 20biti/skaitlis
            - guffman 5.83
            - gamma 6,43
     Vārdnīca:
            1) meklēšanas koki
            2) hash tabulas
            3) sakārtots masīvs, neatkārtojot vārdu sākumus
            
            X1 ... Xn (pirmie I sakrīt ar iepriekšējo vārdu) -> 
                    i(simbolus kaits kas sakīt), n-1(kas nesakrīt), Xi+1 ...XN
           
    Signatūre:
        - bitu virkne garumā W, 1000 <= W <= 10 000
        - vārda signatūra v[1] ... v[w]:
            - v[i]=1 b vērtībām i = {1,,...w}, ^ <= b <= 20
        - teksts v1, ... vm
            v1[1] ... v1[w]
            v2[1] ... v2[w]  vārdu signatūres
            ---------------------------------
            v1[1] ... v[w]
            v[i] = v1[i] OR v2[1] OR vm[1]
        Atlasīt dokumentus, kas satur vādru v:
            1) Atlasa dokumentus, kuru signatūre atbilsta tam, ka tie varētu sat. v
            2) Pārbauda katru no šiem dokumentiem
            
     Vektoru modeļi:
        dokumenti => vektori v={v[1] ... v[m]}
            1 ... m -> vārdi
            reprezentācija 1:
                v[i] reižu skaits, cik i sastopams dokumentā
            meklēšana:
                ja jāatrod dokumenti, kas satur vārdu i:
                    pārbauda visus vektorus, kur v[i] > 0
