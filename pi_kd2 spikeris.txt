Programmatūras produkti un procesi: 1
vannas līkne - bath-tube curve

process
apakšprocess aktivitāte - activity
apakš(x2)process darbība vai akcija - [action]
apakš(x3)process uzdevums - task

R.S. Pressman
   |	Tools		     |
  | 	Methods		      |	
 |	Process		       |
|	A quality focus		|

Programmatūras projekta pārvaldības procesi: 2

dokumentēšana
plānošana
konfigurācija, pārvaldība
kvalitātes pārbaude-QA
mērīšana
formālās tehniskās apskates
risku pārvaldība

Organizāciju un programmizstrādes komandu tipi : 8

Herarhija, brīvu cilvēku kompānija, PRICE (projects in controlled enviroments)

PRINCE: projekta valde,projekta pārvaldinieks, komandas pārvaldnieki
PM, team leads

Projekta kalendārā ilguma un darbietilpības prognozēšana: 4
COSMIC

COCOMO
KLOC - planotais kodu rindu skaits
Effort E = a_b (KLOC) b_b= [cilvekmeneshi]
Development Time D = c_b * E * d_c = [meneshi]
People required P = E / D 

Tīkliskā plānošana un Ganta diagrammas (ar piemēriem): 3

Granta diagrammas:
Task ------------------
Task					^------------------------
Tîklveida diagrammas "Critical path method":
Virzīts grafs bez cikliem
virsotnes ir uzdevumi ar norādīto laiku
šķautnes ir saistības (dependecies)

Datu plūsmu diagrammas (ar piemēriem): 12

četri elementi:
riņķis - process ar nosaukumu (bieži ar -šana)
taisnstūris - ārēja entitāte (external entity) ar nosaukumu (piem lietotāji ar veidu)
līnijas ar bultiņu - informācijas plūsma(data flow) ar nosaukumu (var savienot procesus ar jebko)
divas paralelas taisnes - datu krātuve (data store) ar nosaukumu =/= datubāze (superkopa datubāzei)

Programmatūras izstrādes dzīves cikla modeļi (ar piemēriem): 2

agile - scrum
waterfall - v,b

evolucionārie modeļi
prototipēšanas modelis
spirāles modelis

ātrās iztrādes modelis
RAD Rapid application development modelis
60-90 dienu termiņš

Programmatūras konfigurāciju pārvaldība (ar piemēriem): 10
SCI - konfuguracijas vienumi
unikāli identifikatori : UID
versijas

baseline-bāzlīnija

CVS, git, SVN
repozitorijs
------ jauni---------------------------------------------------------
Programmatūras prasības: 6

Prazīmju formulējua īpašība
Katram prasību formulējumam vajadzētu būt:
1) pilnam (complete)
2) pareiza (correct)
3) īstenojam (feasible)
4) nepiecišamam (nesessary)
5) priorizētam (prioritized)
	3 līmeņi būtiski-essential, nosacīta-būtu labi ja būtu, iespējama-optional
6) skaidram (unambiguous)
7) verificējamam (verifiable)

Prasību specifikācija:
a) pilnai (complete)
b) nepretrunīga (consistent)
c) modificējamai (modifiable)
d) trasējamai (tracable)

Kvalitātes atribūti: 6

McCall'a kvalitātes faktori 

Product operation - product revision - product transsion

Product operation:
correctness - pareizība
reliability - uzticamība
usability - lietojamība
integrity - integrutāte (security - drošība(nelaiž iekšā sliktas lietas))
effinciency - efektivitāte

safety - nebīstamība(nav bīstama citiem)
effectiveness - rezultativitātē

product revision:
maintainability - uzturamība
flexibility - pielāgojamība
testability - testējamība

product transsion:
portability - pārnesamība
reusability - atkalizmantojamība
interoperability - sadarbspēja

Trasējamība: 6

spēja izsakot cuar abu veidu saitēm
evolūcijas saites: stingras, saista A-B,ja A veidots balstoties uz B, izmaiņas vienā dod imaiņas otrā
notikumu saites: vājas, kas A satur norādi uz B kautkur pierakstos

Prasību inženierijas labā prakse: 7

f(noderīgums(h/m/l) rows, sarežģītiba(h/m/l) cols)=
  h m l
h 1 2 3
m 8 9 4
l 7 6 5

5- tuksš
1- definēt prasību realizācijas procedūru
	plānus izstrādāt balstoties uz dokumentātām prasībām
	pārrunāt saitības (commitment)
2- identificēt lietošanas piemērus (scenāriji)
	definēt kvalitātes atribūtus
	pielātot PPS sagatavi
	nodibināt izmaiņu vadības padomi (IVP)
	pārbaudīt (check) prasību dokumentus
3- vingrināt, apmācīt izstrādātājus lietojumprogrammatūras jomā.
	uzrakstīt vīziju un tvērumu (scope) (max 1 A4 lapa)
	idenificēt lietotāju grupas
	uzzīmēt konteksta diagrammu
	identificēt prasību avotus
	apzīmēt katru prasību, piešķirt identifikātoru
	nodibināt bāzlīniju un veikt prasību dokumenta versiju vadību
4- izveidot "zināšanu krājumu"
	izvēlējēties produkta "čempionus" (champions)
	izvedot datu vārdnīcu (data dictionary)
	novērot un fiksēt darījumkārtulas (buisness rules)
	izstrādat prasībām atbilstošus testpiemērus (test cases)
	sekot prasību statusam
9- Vingrināt, mācīt prasību analītiķus
	nodibināt fokusa grupas
	izstrādāt prototipus
	analizēt iespējamību (feasibility)
	definēt pieņemšanas(acceptence) kritērijus
	veikt izmaiņu ietekmes analīzes
	izsekot (trasēt) katrai izmaiņai līdz visiem ietkmētiem darba produktiem (work produkts)
8- Izglītot lietotājus un vadītājus par prasībām
	modelēt prasības
	veikt prasību risku pārvaldību
	izmantot risku pārvaldības rīkus
	izveidot prasību trasējamības matrica REL(Prasība,Programmas moduļi)
7- Organizēt kopsanāksmes (Joint Application Development Sessions)
	atkalizmantot prasības (reuse)
	lietot kvalittes funkciju izvēršanas pieeju (Quality Functions Deployment)
	mērīt prasību stabilitāti (nomainītās prasības/visas prasības)
6- Analizēt lietotāju darba plūsmu (workflow)
	Pētīt problēmu ziņojumus (report) 20:80 princips
	Uzrakstīt lietotāja rokasgrāmatu (User manual)
	Uzturēt prasību vēsturi
	Dokumentēt pasību darbietilpību

Kvalitātes nodrošināšana: 9
kvalitātes pārvaldība:
	1. kvalitās pārvaldības pieeja (approach) ~ ISO 9001
	2. rezultatatīva (effective) programminženierijas tehnoloģija (metodes un rīkus)
	3. formālās tehniskās apskates (formal tehical reviews - FTR)
	4. daudzkārtējas (multitiered) testēšanas stratēģija
	5. programmatūras dokumnetācijas un tās izmaiņu vadību. (change control)
	? 6. procedūra, kas panāk atbilstību programistrādes standartiem, ja piemērojams.
	7. mērīšanas un ziņošanas (reporting) mehānismi

kvalitātes sistēma
ISO 9001 īsuma:
	Visi netriviālie procesi ir dokumnetēti un apstiprināti.
	Jābūt īpašiem procesiem, kas uzrauga, koriģē pirmos. (controlls-vadīklas/kontroles)
	Ikvienam darbiniekam savas konpetences ietvarā jāpārzina procesi un jārīkojas sakaņā ar tiem.

Prasību un prasību specifikācijas raksturlielumi (īpašības)

Iespējamības (feasibility) analīze: 7

ekonomiskā iespējamība
	vai ar produktu saistītie ieguvumi ir atklāti dokumentāti?
	vai ieguvumi izteikti naudā?
	vai iecerētā konfigurācija ir izdevīgākais risinājums?
	kādi ir izmaksu un laikplāna(schedule) riski?
tehniskā iespējamība
	vai visi konfigurācijas elementi ir saprotami?
	vai konfigurācija ir izstrādājama noteiktās un noteiktā laika ietvaros?
	vai katram elementam eksistē aatiecīga tehnoloģija?
	vai sistēma balstīsies uz nobriedušām tehnoloģijām?
	vai visas saskarnes ir skaidri definētas? (interfaces to external systems)
	vai funkcijas un veitkspēja(performance) ir īstenojamas?
	vai eksistē nepiecišamie resursi?
	kādi ir tehniskie riski?
	vai visiem elemntiem iespējams kvalitātēs nodrošināšana (QA)?
 	vai mašīnas-mašinas un cilvēka-mašinas saskarnes veidotas saprātīgi (inteligent manner)?
juridiskā iespējamība
	vai konfigurācijas nerada tiesku atbildību?
	vai īpašumtiesibas() nav skartas?

Ekonomiskā lietderība, tehniskā realizējamība, tiesiskais pamatojums.: 7

Ekonomiskā lietderība: 
	satur izmaksu un labumu analīzi - novērtējumu sistēmas izstrādes projekta
	ekonomiskajam pamatojumam. Izmaksu-labumu analīze attēlo projekta
	izstrādei nepieciešamas izmaksas un salīdzina tos ar materiāliem un
	nemateriāliem ieguvumiem no sistēmas izstrādes.

Tehniskā realizējamība:
	Tehniskā analīze sākas ar sistēmas tehniskās dzīvotspējas novērtēšanu.
	Kādas tehnoloģijas ir nepieciešamas, lai apmierinātu sistēmas funkcionalitāti
	un veiktspēju? Kādi materiāli, metodes, algoritmi vai procesi ir nepieciešami
 	un kādi ir to izstrādes riski? Kā šīs tehnoloģijas ietekmēs izmaksas?

Blanchard un Fabrycky definē kritēriju kopu modeļu izmantošanai, veicot tehnisko analīzi, šādi:
1. Modelim ir jāreprezentē sistēmas konfigurācijas dinamiku pietiekami vienkāršu, lai to varētu viegli saprast un manipulēt ar to, tai pat laikā pietiekami tuvu realitātei.
2. Modelim ir jāiezīmē tie faktori, kuri ir svarīgi problēmas risināšanai un noklusēt tos, kuri nav tik svarīgi.
3. Modelis ir jāveido kā vispārējs, iekļaujot visus būtiskus faktorus un tam ir jābūt uzticamam, ņemot vērā rezultātu atkārtojamību.
4. Modeļa projektējumam jābūt pietiekami vienkāršam, lai savlaicīgi implementēt problēmu risinājumus.
5. Modeļa projektējumam ir jāiekļauj noteikumi vieglai modificēšanai un/vai papildināšanai, lai ļautu novērtēt papildus faktorus atbilstoši prasībām.

Tiesiskais pamatojums:

Tiek noteikti jebkuri likumpārkāpumi, traucējumi vai atbildība, kuri var iestāties vai izrietēt no sistēmas izstrādes.