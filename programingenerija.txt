@##1 lekcija 1.
lidz 15 sept iesniegus par 2 gadu diplomu ASAP

ja ierodas uz visam lekcijam (paraksti)
kontoldarbos nevar mazāk 4.

KD(30%):
15.10
03.12
10.12

not final
-----------
PD(20% kopā)
10% 8/15 pr d apmeklejumi
5% 4 jabut visai grupai prezentacijas
5% bonuss aktivākajiem

vadītāji:
P : docents Sergejs Rikačovs
O : Borzovs
T : DD
Piekd : dok makssims kravcevs
artūrs žogla

prasības
projektējumi:
	datubāzes
	ekrānformas (GUI)
atbilstoši standarta prasībām

neiesaka spēles kā tēmu

Eksāmens(50%)
izstrādātā prakstiskā darba izstrādāšana

javnāra pēdējā nedēļā (3-dien (drizak) vai 2-dien) 9:00 
not final, critical
var iesniegt iepriekš (ļoti iesaka)

lidz 11.00 raksta recenzija
pēc dialogs un izvertejums
vērtējums ar precizitāti 0.1

--------------
i-iespeja
noprogrammēt sistēmu

5 min smoke test
---------------
118 studenti kopa

@##2 lekcija 2.
Fritz Bauer 1969.

citās nozares:
ideja
uzmetums/skice
projektēt
konstruēt
  uzturēšana
  ražošanas sagatavošana

programmēsana:
ideja
Requierements
projektē
kodēšana
Development

produkts: 
programma: kods,izpildāmie faili
dokumentācija
informācija(lietotājam)

definēt (define)
konstruēt (create)
atbalstīt (support)

kādi procesi jāveic?
kādi starpprodukti jāizveido?

process
apakšprocess aktivitāte - activity
apakš(x2)process darbība vai akcija - [action]
apakš(x3)process uzdevums - task

projekts - project
projetējums - a design

* -project framework
{
*atbalta aktivitātes - umbreja activities:
{
dokumentēšana
plānošana
konfigurācija, pārvaldība
kvalitātes pārbaude-QA
mērīšana
formālās tehniskās apskates
risku pārvaldība
*programinženierijas aktivitāte -
}
projektēšanas aktivitāte
{}
programmēšanas aktivitāte
{}

programinženierijas aktivitāte #
{
-,- akcija #1
{
 uzdevumi{
	darba uzdevumi- work tasks
	darba produkti
	kvalitātes nodrošināsānas punkti QAP
	projekta škirtnes - project milestones
}
}
-,- akcija #2
{
uzdevumi
}
-,- akcija #3
{
uzdevumi
}
}

programmatūras iztrādes dzīves cikls - software life cycle

1971.g
@###3 lekcija 3.
Fiziskie materiālie(ierīces)
vannas līkne - bath-tube curve
Programmatūra:
nav k/x līkne
nenovēlu nevienam uztaisīt kaut ko derīgu
pīķo kad ievieš ko jaunu (change request)
un lēni līdzinās bath curve

kādi ir regresijas varbūtība?
vidēji 50%

darbietilpība - effort
40% izstrāde
60% izmaiņas

Mīti:
 Lietotāju mīti.
	Izmaiņas ir viegli īstenojamas. Izmaiņa prasībās 1 vienība. Projektējumā 3-6 vienības. Kodā 10 vienības.Testēšana 30-70 vienības.Eksplotācija 40-100 vienības.
	Pietiek ar vispārīgu uzdevuma formulējumu, lai sāktu programmēt.
 Izstrādātāju mīti.
	Tikko programma strādā, darbs ir padarīts.
	Vienīgais nodevums (deliveable).
	Kamēr programmu neiedarbina, tās kvalitāti novērtēt nevar.
 Pārvaldītāju mīti.
	Pietiek ar moderniem aparatūra un programmatūru. Vajag apmācības laiks. Pietiek ar rokasgrāmatām (manuals). Vajag apgrūt.
Ja projekts kavējas, palielināsim programmētāju skaitu."Lielās ordas" "Mongoļu ordas".

Programmatūras inženērijas
(1) Sistemātikas, disciplenētas, kvantificējamas pieejas lietošana programmas izstrādei (development), darbināšanai(operating) un uzturēšanai(maintance), t.i. PI pielietošana.

modelis is kautkas kas reprezentē jau esošo lietu vai procesu, iedomātu lietu vai procesu. Medelis ir vienkāršo.

R.S. Pressman
   |	Tools		     |
  | 	Methods		      |	
 |	Process		       |
|	A quality focus		|

--------------------------------------------
Kādā secībā izpildīt ietveraktivitātes?
V.Royce - waterfall (udenskrituma modelis lineārie modeļi)
Kommunikācija
	Plānošana
		Modelēšana
			Konstruēšana (coding+testing)
				Izvēršana - deployment

b-modelis
Analīze
Projetēšana 
Manefacturing Konstruēšna
Akceptēšana
Darbināšana/Ekplocēšna
	Vērtēšana
		Analīze
			Projektēšana
				konstruēšana -> Akceptēšanu

v-modelis

Iecerētais Produkts		Izvēlētie izstrādes procesi
tabula kuram taska atbilt kura fāze un cik cilvēk stundas

Tīklveida plānošana
Ganta diagramma

incremental
pieaudzējošais

ātrās iztrādes modelis
RAD Rapid application development modelis
60-90 dienu termiņš

evolutinarie modeļi
prototipēšanas modelis
spirāles modelis
unified process model

agile-spējā izstrāde
1975. gadā kautkas līdzīgs
scrum model
maza (3-9) cilvēku kompānija
intensīva komunikācija ar pasūtītāju
specifikācijas vietā testpiemēri

---------------------------
praktiskie darbi
1.sistēmas tēma vajag uz 19.09
vai zināms problēmu apgabals?
kādi būs šīs sistēmas lietotāji? (kādas grupas?)
pamatfunkcijas
tehnoloģija
2. vērtēšana

Prezentācijas
1. Ievads, prasības 26.09, 3.10
2. datu plūsmu diagrammas 24.10 31.10
3. Datu bāze 21.11, 28.11
4. ekrānformas 12.12, 19.12

Eksāmena materiāls

Praktiskais darbs ir izrukāts, iesiets dokuments.
----------------------------------
Standarti:
norāda kas jābūt dokumentos.
norāda procesa soļus.

----------------
pr.d
nosaukums
sistēmas neformāls apraksts
 līdzīgi anotācijai 300 - 400 zīmes
biznesa prasības
 mērķis
 vajadzības, kuras grib sasniegt.
 veiksmes faktors
 3-5 teikumi
 piem:"iespēja internetā saņemt pakalpojumus"
lietotāji
funkciju shēma

----------------------------
PPS
no intervijam iegūst
tad apkopo
tad saskaņo

PPS saturs
1.Ievads
 kas ir un kas nav
2. Vispārējs apraskts
2.1. Produkta perspektīva
 kāds ir problēmu pagabals, konteksts, vide ar kadā sistēmām iedarbojas
2.2. Produkta funkcijas


15.10. 8:30 vai 10:30 90min KD
2 jautājumi


1.datu plūsmu diagramas (data flow diagrams)

četri elementi:
riņķis - process ar nosaukumu (bieži ar -šana)
taisnstūris - ārēja entitāte (external entity) ar nosaukumu (piem lietotāji ar veidu)
līnijas ar bultiņu - informācijas plūsma(data flow) ar nosaukumu (var savienot procesus ar jebko)
divas paralelas taisnes - datu krātuve (data store) ar nosaukumu =/= datubāze (superkopa datubāzei)

Var izmantot dialektu norādot precīzi.
0. līmeņa jeb konteksta diagramma. Tieši 1 process.
1. līmeņa 0->1. divide and conquer katru procesu paskaidro ar atsevišķu diagrammu.

2.programēšnas projektu pārvaldība (organizācija struktūrai)

PMBOK - project management body of knowlage
PMI - project managemant institute

Projeta pārvaldība - zināšanu (knowladge)prasmju (skils) rīku (tools),  paņēmienu (techniques) projeta aktivitātēs ar mērķi apmierināt projekta prasības.
pārvaldības darbības lauks:
konkurrējošas vajadzības

tvērums - scope
laiks
izmaksas
riski - threats
kvalitāte

iesinteresētie (stakeholders) gan + gan -
indenficētās prasības


9 apkakšprocesi
1. projeta integrācijas pārvaldība (neizjukt)
	projekta plāna iztrāde
	pp izpilde
	integretāte izmaiņu vadība
2. projekta tvēru pārvaldība
	inicēšana
	tvēruma plānošana
	tvēruma definēšana
	tvēruma izmaiņu vadība
3. projekta laika pārvaldība
	aktivitāšu noteikšana
	aktivitāšu savirknēšana
	aktivitāšu ilguma prognozēšana
	laikaposma (schedule) iztrāde
	laikaplānu vadība
4. projekta izmaksu(cost) pārvaldība
	resursu plānošana
	izmaksu prognozēšana
	izmaksu iekļaušana buģetā
	izmaksu vadība
5. projekta kvalitātes vadība
	kvalitātes plānošana
	kvalitātes nodrošināšana
	kvalitātes vadība
6. projekta personāla
	organizācionālā plānošana
	personāla piesaiste projektam
	komandas veidošanas
7. projekta komunikācijas (saziņas) pārvaldība
	saziņas plānošana
	imformācijas izplatīšana
	ziņošana par paveikto
	administratīvā slēgšana (closure)
8. projekta risku pārvaldība
	risku pārvaldības plānošana
	risku identificēšana
	izanalizēt riskus:
	kvalitatīvā
 	(?)konfitatīvā
	reaģēšanas uz riskiem plānošana
	risku novērošana novērošana (monitoring)
9. projekta apgāde
	apgādes plānošana
	iegādes (delivery) plānošana
	iegāde
	līguma administrēšana
	līguma nobeigšana

Organizāciju tipi:
Funcionālā organizācija (Borzovam liekas ka vajag norādīt šo kvalifikāciajas darbā- ir sadaļa)
matricas
	vājās matricas
	līdzsvarotās (balensētās)
	stiprās matricas
Projektorientātās

Funcionālās

chief exutive

funtional mgr (depertamenti)
un staff


3.dabietilbības progranazēšana(effort estimation)
function points

Information Domain Values
	Skaits
	Svara factori(weighting factor) Vienkāršs Vidējs Sarežģīts
Ārējais ievaddati (ext. inputs)
Ārējas izvadati (ext. outputs)
Ārēji vaicājumi (ext. inquiries)
Iekšējas loģiskas datnes (internal logical files)
Ārēju saskarņu (intefeisu) datņu ext. interface files

kopsaits count total  = sum of skaits * svara factori
FP = count total * (0.65 + 0.01 * sum of Fi )
Fi(i pieder 1  .. 14): [0,1]
pieeri factoriem:
f1
f4 vai performace ir kritiska 

LOC lines of code

LOC per FP	Vid Mediaana	Min 	Max
c++			66	53			29		173
java		63	53			77		-
asambler	337 315			91		694

30 % tolerance

Kvalifikācijas darbā:
pamatot ka iztrādātais produkts atbilst vismaz 3 personmēnešu darbietilbībai
balstīties uz performace datiem pa vairākiem projectiem un kompānijām

Putram - Norden - Rayleigh curve
darbietilbība no kalendarrā laika
Td - development time
Fd - darbietilpība
T0 - optimalais laiks = 2 * Td, tad F0 << Fd
f(3/4 Td) minimālais

Prasības - requirements

1993 Davis lietotāju vajadzības vai nepieciešamassitēmas pazīmes. funcjias vai atribūti, kuras var just no ārpuses.

1994 Jones prasība ir lietotāju vajadzību konstatējums, kas izraisa sistēmas iztrādi

1997 Somemerville, Sauyer - specifikāciju, kurā ir teikts, kas ir jāievieš. Tie ir apraksti, kā sistēmai jāuzvedas, kādas is sitēmas īpašibas un atribūti.

Prorammēšanas prasības - software requirments
IEEE Standard Glosasary of Software Engenering Terminology

1 Nosacījums (condition) vai spēja (capability) kurš nepieciešams lietotāju problēmas risināšanai vai mērķu sasniegšnai.
2 Nosacījums vai spēja, kura var piemist sistēmai piemist ssitēmai vai sitēmas komponentei, lai izpildīti līgumu, standartu specifikāciju vai citu formāju obligātu dokumentu.
3 Dokumentāta pirmajā vai otrā punktā formulēto nosacījumu vai spēju reperezentācija.

Darījumprasības - buisness requirement (vīzijas vai tvēruma specifikācija)
Lietotāju prasības (Use-cases)
Functionālās prasības (Functional requirements) (programmastūras prasības specifikācija)
Sistēmas prasības -> functionālās prasības
Lietotāju prasības -> kvalitātes atribūti, faktori. | Citas nefunctionālas prasības | Ierožobojumi (constraints) => functionālā specifikācija

feature - iezīme
characteristic - raksturiezīme

Prazīmju formulējua īpašība
Katram prasību formulējumam vajadzētu būt:
1) pilnam (complete)
2) pareiza (correct)
3) īstenojam (feasible)
4) nepiecišamam (nesessary)
5) priorizētam (prioritized)
	3 līmeņi būtiski-essential, nosacīta-būtu labi ja būtu, iespējama-optional
6) skaidram (unambiguous)
7) verificējamam (verifiable)

Prasību specifikācija:
a) pilnai (complete)
b) nepretrunīga (consistent)
c) modificējamai (modifiable)
d) trasējamai (tracable)

Prasību izstrāde un pārvaldība
	requirements engenering
	requirements management

requirements engenering
	requirements development
		Elicitation - izzināšana
		Analysis
		Specification
		Verification
	requirements managment

requirements development activities
	noskaidrots lietotāju klases
	izzināt klašu vajadzības
	saprast lietotāju mērķus un uzdevumus, kā arī darījumu vajadzības
	analizēt no lietotāju iegūts info sķirošana, funcinālās prasības, darījumkārtulas (buisness rules), kvalitātes atribūti, ieteiktie risinājumi, nevadzīga informācija.
	sadalīt sistēmas prasības apakšsitēmās un daļu no tām "piešķirt" programatūras sistēmai.
	saprast kvalitātes atribūtu relatīvo svarīgumu
	vienoties par implmentēšnas prioritātēm
	"pārtulkot" savāktās lietotāju vajadzības par rakstisku specifiskāciju un modeļiem
	jāvienojas ar pasūtītāja par prasību specifikācijas akceptēšanu
	
requirements managment activities
	apskatīti izmaiņu pieprasījumu
	īstenot izmaiņas
	aktualizēt projekta plānu
	vienoties par jaunām

-------------------------------------------
Darbietilpības prognozēšana (Effort estimation)

Produktivitāte = Paveiktais darbs(software size)/Patērētie resursi(laiks)(Project effort)
Prognozētā darbietilpība = Prognozētais darbs(estimated software size)/Iedomātā produktivitāte

Darbietilpības prognozēšana:
	novērtēšana - prognozē programmatūras produkta izstrādei nepieciešamo darba apjomu
	novērtējumi - nepieciešami visu laiku:
				pirms proj., uzsākšanas - lai novērtētu vai projekts īstenojums, piedalītos konkursos un plānotu budžetu
				periodiski - lai nepieciešamības gadījumā pārdalītu resursus

Veiksmīgs projekts:
	vajadzīgā funkcionalitāte
	norunātajā laikā piegādāts
	par norunāto cenu
	sasniegta prasītā kvalitāte

Neprecizitātes iemesli:
	prasības
	projektējums
	izstrāde
	testēšana
	ieviešana - liet akcepts
	personāls - pieredze
	tehnoloģijas - viena vai vairākas platformas

Pieejas:
	Bottom-up - darbu sadala nelielās aktivitātēs, veic darbietilpības novērtējumu katrai aktivitātei, sasumē visu (lieto kad nav pieredzes)
	Top-down - novērtē visu darbu kopumā, zemāka līmeņa uzdevumiem kā daļa no kopējā (vajadzīga pieredze)

Rindiņu skaitu NAV ieteicams izmantot darbietilpības noteikšanai

Novērtēšnas metodes:
	Algoritmiskie modeļi (lieto mat formulas, izmanto līdzīgu, pabeigtu pojektu datus, COCOMO 2, COSMIC utt.)
	Ekspertu vērtējums (DELPHI, PERT, Plānošanas pokers, vienas personas vērtējums)
	Analoģiju bāzēti vērtējumi (Vērtējumus veic balstoties uz ļoti līdzīgu projektu datiem)

COSMIC darbietilpības metode:
	atbilst standartam ISO/IEC 19761:2003
	publicēta 1999. gadā, pēdējā versija 2009. gadā
	derīga: darījumlietotnēm(vussiness applications), reālā laika programmatūrai(real time software), hibrīdām lietotnēm
	nederīga: ietver sarežģītas loģiskās sitēmas, sarežģitas matemātiskās funkcijas, skaņas un video apstrāde utt
	viens CFP ir definēts, kā viena datu pūsma
	1. solis: identificēt lietotājus (jebkas, kas izmanto programmu)
	2. solis: identificēt funkcionālos procesus un trigerus (trigeris - kāds notikums)
	3. solis: identificēt datu plūsmas (ievads (entry), izvads(exit), lasīšana(read), rakstīšana(write))
	4. solis: CFP salīdzina ar benchmark testiem(aprēķina sadalījumus pa aktivitātēm - planing, analysis, building utt)
	Benchmarking data - pabeigtu projektu dati(dati pieejami par maksu)

-----------------------------------------
Prasības requirements
R Wiegers
PR specifikācija
	funckcionālās prasības
	kvalitātes atribūti
	citas nefunctionālās prasības
	ierogežojumi (constraints)

1987. HP
FURPS - functionality, usability(lietojamība), reliability(uzticimība), performance (veikspēja), suportability (atbaltāmība)

1977 McCall + Richards + Walters
McCall'a kvalitātes faktori 

Product operation - product revision - product transsion

Product operation:
correctness - pareizība
reliability - uzticamība
usability - lietojamība
integrity - integrutāte (security - drošība(nelaiž iekšā sliktas lietas))
effinciency - efektivitāte

safety - nebīstamība(nav bīstama citiem)
effectiveness - rezultativitātē

product revision:
maintainability - uzturamība
flexibility - pielāgojamība
testability - testējamība

product transsion:
portability - pārnesamība
reusability - atkalizmantojamība
interoperability - sadarbspēja

ISO 9126

Functionality
	suitability - noderība
	accuracy - precizitāte
	interoperability - sadarbspēja
	complience - saskaņotība
	security - drošība
Reliability - uzticamība
	maturity - briedums
	fault-tollerance - deffektpiecietība
	recovebility - atkopšana
Usability - lietojamība
	understandability - saprotamība
	learnability - apmācāmība
	operability - darbināmība
Effinciency - efektivitāte
	time behaviour - "laika izmantošna"
	resouce behaviour - "citu resursu izmantošna"
Maintainability - uzturamība
	analysability - analizējamība
	changability - maināmījamība
	stability - stabilitāte
	testability - testējamība
Portability - pārnesamība
	adaptability - adaptējamība
	installability - instalējamība
	conformance - atbilstība
	replaceability - aizvietojamība

Tiesības un pienākumi
pasūtīju tiesības:
1.  Analītiķis runās pasūtītāja valodā (abas iedomātās)
2.  Analītiķis apgūst organizācijas darījums (buisness) un sistēmas mērķus.
3.  Analītiķis fiksēs prasību ievākšanas procesā iegūto informācijā prasību specifikācijā.
4.  Saņemt no izstrādātājiem skaidrojumu par prasību vākšanas rezultātiem.
5.  Un cieņu un profesionālu attieksmi.
6.  Sagaidīt no izstrādātājiem idejas un alternatīvus priekšlikumus.
7.  Sagaidīt tādas produkta īpašibas, kas padarīs lietošanu ērtu un patīkamu.
8.  Sagaidīt iespēju produkta atkalizmantošanai.
9.  Būt nodrošinātam pret negodīgu izmaksu un iekmes novērtējumu.
10. Saņemt produktu, kas apmierina akceptētās parakstītās funkcionālās un kvalitātes prasības.

pasūtīju pienākumi:
1.  Izglītot analītiķus savā darījuma svērā un definēt svēras profesionālo žargonu.
2.  Veltīt pietiekamu laiku prasību izklāstīšanai, precizēšanai un atjaunināšanai.
3.  Būt konkrētam un precīzam prasību izskaidrošanai.
4.  Savlaicīgi pieņem lēmumus par izmaiņām.
5.  Respektēt izstrādātāja veikto darbietilpības izmaksu prognozi.
6.  Noteikt prasību, funkciju un lietošana piemēru (use cases) prioritātes.
7.  Veikt prasību dokumentācijas un prototipu apskates (reviews).
8.  Izmainīt par projekta prasību iespējami savlaicīgi.
9.  Piesakot izmaiņu pieprasījumus ievērot projekta vadlīnijas.
10. Respektēt izstrādātāja prasību inženierijas procesus.

prasību inženierijas labā prakse

f(noderīgums(h/m/l) rows, sarežģītiba(h/m/l) cols)=
  h m l
h 1 2 3
m 8 9 4
l 7 6 5

5- tuksš
1- definēt prasību realizācijas procedūru
	plānus izstrādāt balstoties uz dokumentātām prasībām
	pārrunāt saitības (commitment)
2- identificēt lietošanas piemērus (scenāriji)
	definēt kvalitātes atribūtus
	pielātot PPS sagatavi
	nodibināt izmaiņu vadības padomi (IVP)
	pārbaudīt (check) prasību dokumentus
3- vingrināt, apmācīt izstrādātājus lietojumprogrammatūras jomā.
	uzrakstīt vīziju un tvērumu (scope) (max 1 A4 lapa)
	idenificēt lietotāju grupas
	uzzīmēt konteksta diagrammu
	identificēt prasību avotus
	apzīmēt katru prasību, piešķirt identifikātoru
	nodibināt bāzlīniju un veikt prasību dokumenta versiju vadību
4- izveidot "zināšanu krājumu"
	izvēlējēties produkta "čempionus" (champions)
	izvedot datu vārdnīcu (data dictionary)
	novērot un fiksēt darījumkārtulas (buisness rules)
	izstrādat prasībām atbilstošus testpiemērus (test cases)
	sekot prasību statusam
9- Vingrināt, mācīt prasību analītiķus
	nodibināt fokusa grupas
	izstrādāt prototipus
	analizēt iespējamību (feasibility)
	definēt pieņemšanas(acceptence) kritērijus
	veikt izmaiņu ietekmes analīzes
	izsekot (trasēt) katrai izmaiņai līdz visiem ietkmētiem darba produktiem (work produkts)
8- Izglītot lietotājus un vadītājus par prasībām
	modelēt prasības
	veikt prasību risku pārvaldību
	izmantot risku pārvaldības rīkus
	izveidot prasību trasējamības matrica REL(Prasība,Programmas moduļi)
7- Organizēt kopsanāksmes (Joint Application Development Sessions)
	atkalizmantot prasības (reuse)
	lietot kvalittes funkciju izvēršanas pieeju (Quality Functions Deployment)
	mērīt prasību stabilitāti (nomainītās prasības/visas prasības)
6- Analizēt lietotāju darba plūsmu (workflow)
	Pētīt problēmu ziņojumus (report) 20:80 princips
	Uzrakstīt lietotāja rokasgrāmatu (User manual)
	Uzturēt prasību vēsturi
	Dokumentēt pasību darbietilpību
-------------------------------------------
Datu bāze:
ER konceptuālais models
ER realizācija
Tabulas preojektējums

PPS
 prasības
 DPD

funckiju saraksts, grupēšana
----------------------------------------------
Iespējamības analīze (feasibility analysis)
ekonomiskā iespējamība
	vai ar produktu saistītie ieguvumi ir atklāti dokumentāti?
	vai ieguvumi izteikti naudā?
	vai iecerētā konfigurācija ir izdevīgākais risinājums?
	kādi ir izmaksu un laikplāna(schedule) riski?
tehniskā iespējamība
	vai visi konfigurācijas elementi ir saprotami?
	vai konfigurācija ir izstrādājama noteiktās un noteiktā laika ietvaros?
	vai katram elementam eksistē aatiecīga tehnoloģija?
	vai sistēma balstīsies uz nobriedušām tehnoloģijām?
	vai visas saskarnes ir skaidri definētas? (interfaces to external systems)
	vai funkcijas un veitkspēja(performance) ir īstenojamas?
	vai eksistē nepiecišamie resursi?
	kādi ir tehniskie riski?
	vai visiem elemntiem iespējams kvalitātēs nodrošināšana (QA)?
 	vai mašīnas-mašinas un cilvēka-mašinas saskarnes veidotas saprātīgi (inteligent manner)?
juridiskā iespējamība
	vai konfigurācijas nerada tiesku atbildību?
	vai īpašumtiesibas() nav skartas?

Kvalitātes nodrošināšana Quality Assurance

Quality management - kvalitātes pārvaldība (subj. ~saistītās ar cilvēkiem)
? Quality control - kvalitātes vadība (samazināt (starp)produktu atšķirības, defektus)
Quality assurance - kvalitātes nodrošināšana

assurance
	kā panākt ka produkts ir kvalitatīvs
	kā apliecināt ka daram visu saprātīgi nepieciešamo kvalitātes sasniegšanai

kvalitātes pārvaldība:
	1. kvalitās pārvaldības pieeja (approach) ~ ISO 9001
	2. rezultatatīva (effective) programminženierijas tehnoloģija (metodes un rīkus)
	3. formālās tehniskās apskates (formal tehical reviews - FTR)
	4. daudzkārtējas (multitiered) testēšanas stratēģija
	5. programmatūras dokumnetācijas un tās izmaiņu vadību. (change control)
	? 6. procedūra, kas panāk atbilstību programistrādes standartiem, ja piemērojams.
	7. mērīšanas un ziņošanas (reporting) mehānismi

kvalitātes sistēma
ISO 9001 īsuma:
	Visi netriviālie procesi ir dokumnetēti un apstiprināti.
	Jābūt īpašiem procesiem, kas uzrauga, koriģē pirmos. (controlls-vadīklas/kontroles)
	Ikvienam darbiniekam savas konpetences ietvarā jāpārzina procesi un jārīkojas sakaņā ar tiem.

FTR:
Formal - ar definētu procededūru un definētu rezultātu
Tehnical - sanāksmē piedalās tikai profesionāļi, izstrādātāji
Review - sanāksme no vismaz 2/3-5, lai izvētēta produkta atbilstību prasībām.

piedalās
	izstrādātājs
	apskates vadītājs
	(peer) pieredzējis tā paša objekta izstrādātāju
	kādi no pārbaudāmā objekta turmākajiem izmantotājiem
	protokulētājs

apskates vadītājs izsūta pārbaudāmo objektu grupas locekļiem, un sakaņo sanāksmes laiku un vietu.
	2 nedēļu atstarpe
	objektam nav jābūt pārāk lielam (2h review vērtam)

vai bija pietiekami laika lai apskatītu?
	max 20min izstrādātājam skaidrot un rādīt
	pludina kopā (merge) visus defektu sarakstus un iegūst problēmu kopsarakstu.

review report:
	kas piedalījās
	ko apskatija (identifikācija)
	ko nolēma (
		apstiprināt bez iebildumiem
		apstiprināt ar piezīmēm (ne ilgāk kā 2 nedēļas lai salabotu un tad apstiprina apskates vadītājs)
		noraidīt (nevar defektus novērt 2 nedēļās)
		)

Programmatūras testēšana
Ikviena datorprogramma ir pareiza.
Nav zinams vai dara ko vajag.
Nepiecišams orākuls 1, lai pateikt vai rezultāts atbilst ievaddatiem.
Kad drīgst beigt testēt? Nepieciešams orākuls 2.

test-
	testpiemērs- testcase
		ievaddati un "pareizais" rezultāts
		tikai ievaddati
	testēšana
	----------
	testēšanas procedūra
	testēšanas parskats (report)

2 pieejas (approach), white box (glass box) and black box
testēšanas paņēmieni (technieques)
testēšanas stratēģijas (strategies)

Stikla kastes testēšana (strukturātā testēšana)
~ 1970 apskatija control flow- vadības plūsmas

coverage

C0 - covered all code lines
C1 critejs >=75% coverage (every 2 connected lines)
C2 - covered every 3 lines connected

kā iegūt test piemēru kopu critējam C1